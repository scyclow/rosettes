import { Vec2 } from "./vec";
/**
 * Joins adjacent pairs of pointLists where the first ends within tolerance of where the second begins.
 *
 * e.g. with tolerance >= 0.1,
 * `[[{x: 0, y: 0}, {x: 10, y: 0}], [{x: 10.1, y: 0}, {x: 20, y: 0}]]` becomes
 * `[[{x: 0, y: 0}, {x: 10, y: 0}, {x: 20, y: 0}]]`.
 *
 * @param pointLists List of paths to join
 * @param tolerance When the endpoints of adjacent paths are closer than this, they will be joined into one path.
 * @return The optimized path list.
 */
export declare function merge(pointLists: Vec2[][], tolerance?: number): Vec2[][];
/**
 * Filters out paths shorter than a certain length.
 *
 * @param pointLists List of paths to filter
 * @param minimumPathLength Paths whose length is less than this value will be filtered out.
 * @returns A new point list, with short paths excluded.
 */
export declare function elideShorterThan(pointLists: Vec2[][], minimumPathLength: number): Vec2[][];
/** Reorder paths greedily, attempting to minimize the amount of pen-up travel time. */
export declare function reorder(pointLists: Vec2[][]): Vec2[][];
//# sourceMappingURL=index.d.ts.map